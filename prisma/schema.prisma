generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Message {
  messageID String   @id
  channelID String
  guildID   String
  userID    String
  createdAt DateTime @default(now())
  updatedAt DateTime
  Player    Player   @relation(fields: [userID], references: [discordID])
  Upvote    Upvote[]
}

model Player {
  discordID       String    @id
  discordTag      String
  points          Float     @default(0)
  level           Int       @default(0)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime
  upvotesGiven    Int       @default(0)
  upvotesReceived Int       @default(0)
  messagesSent    Int       @default(0)
  Message         Message[]
  Upvote          Upvote[]
}

model Upvote {
  id        String   @id
  messageID String
  channelID String
  guildID   String
  userID    String
  createdAt DateTime @default(now())
  updatedAt DateTime
  Message   Message  @relation(fields: [messageID], references: [messageID])
  Player    Player   @relation(fields: [userID], references: [discordID])

  @@index([messageID])
  @@index([messageID, userID])
  @@index([userID])
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now()) @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String            @id @default(cuid())
  name             String?
  email            String?           @unique
  emailVerified    DateTime?
  image            String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @default(now()) @updatedAt
  isPro            Boolean           @default(false)
  isAdmin          Boolean           @default(false)
  accounts         Account[]
  proCheckouts     ProCheckout[]
  ProSubscriptions ProSubscription[]
  sessions         Session[]
}

model ProCheckout {
  id          String            @id @default(cuid())
  userID      String
  checkoutID  String
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @default(now()) @updatedAt
  checkoutURL String
  status      ProCheckoutStatus @default(open)
  user        User              @relation(fields: [userID], references: [id])
}

model ProSubscription {
  id         String   @id @default(cuid())
  userID     String
  checkoutID String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
  user       User     @relation(fields: [userID], references: [id])
}

model Podcast {
  id          Int       @id @unique @default(autoincrement())
  title       String
  description String?
  image       String?
  link        String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
  episodes    Episode[]
}

model Episode {
  id            Int      @id @unique @default(autoincrement())
  episodeNumber Int
  title         String
  description   String?
  image         String?
  link          String?
  podcastId     Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt
  podcast       Podcast  @relation(fields: [podcastId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model BlueContact {
  email     String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model BlueContactlist {
  id        String   @id @default(cuid())
  email     String
  listID    Int
  listName  String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([email, listID])
}

enum ProCheckoutStatus {
  open
  expired
}
