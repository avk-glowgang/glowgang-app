generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  isPro   Boolean @default(false)
  isAdmin Boolean @default(false)

  proCheckouts     ProCheckout[]
  ProSubscriptions ProSubscription[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model ProCheckout {
  id String @id @default(cuid())

  user   User   @relation(fields: [userID], references: [id])
  userID String

  checkoutID  String
  checkoutURL String
  status      ProCheckoutStatus @default(open)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model ProSubscription {
  id String @id @default(cuid())

  user   User   @relation(fields: [userID], references: [id])
  userID String

  checkoutID String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

enum ProCheckoutStatus {
  open
  expired
}

model Podcast {
  id          Int       @id @unique @default(autoincrement())
  title       String
  description String?
  image       String?
  link        String?
  episodes    Episode[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Episode {
  id            Int     @id @unique @default(autoincrement())
  episodeNumber Int
  title         String
  description   String?
  image         String?
  link          String?
  podcastId     Int
  podcast       Podcast @relation(fields: [podcastId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model BlueContact {
  email String @id

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model BlueContactlist {
  id       String @id @default(cuid())
  email    String
  listID   Int
  listName String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([email, listID])
}
